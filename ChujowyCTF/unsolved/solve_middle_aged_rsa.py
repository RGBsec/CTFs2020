from itertools import product
from random import randint
from utils.flag_strings import leet_flag_chars


def encrypt_chunk(N, e, chunk):
    x = int.from_bytes(chunk, 'big')
    y = randint(0, 256^len(chunk))
    return pow(x*y, e, N)

N = 8253739811954581079883039653942654828989174169644077688004866911334570443238256707000464976374427913064639227592850646081613768794916489709879420823958866972099691720365204482444559053744098284697751099958397641049841044824572077836245068765517608578206286963402252110099502447542876135399013735538782226595080682739972858610074768168965455264004190192539915392931811674915249218168102737221545006205089105812553097584709166808879443187183230873628462738206111021585807086602983532655417491697917674860731538262303204924272897658587479800829311801911720997580159145158561580130445341389419966759054769453825386497329
e = 0x10001

def brute_chunk(ct, hint: bytes=None):
    for x in product(leet_flag_chars.encode(), repeat=3):
        if hint: x=hint
        print(x)
        x = int.from_bytes(b''.join([x]), 'big')
        print(x)
        for y in range(256**3):
            if y & 4095 == 0:
                print(y)
            if pow(x*y, e, N) == ct:
                return x
    raise ValueError("Probably wont ever reach this point anyways")

print(N, e)
ct = [7002358750586430866918382685379324405838134092589414334544862895468981983579994002170153683443506979620456780578970685134077650416595173900051216545603605332154486183221044054227483156438167692328111283607155686194902427018501637639306143152696664715185378103177658991356891774035455930802057660426068286878000337999889833604080451005005027945826126656063468161948012516592666345638573292775949687717339119264189778809925525279479232191693786859805089965513616809553674104550368701582029714386870375435318293645762390622862366385637377245864590791797481835568531620965853380098735378478302540759319632580992196356033]
print(brute_chunk(N, b"chC"))
# print([encrypt_chunk(N, e, flag[i:i+3]) for i in range(0, len(flag), 3)])
