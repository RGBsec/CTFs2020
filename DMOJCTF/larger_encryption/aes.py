import secrets
from collections import Counter


sbox = [229, 108, 94, 215, 231, 71, 220, 12, 23, 35, 44, 217, 172, 225, 40, 51, 171, 127, 121, 216, 120, 42, 114, 126, 90, 137, 26, 145, 233, 201, 165, 89, 236, 87, 128, 246, 67, 185, 11, 43, 92, 223, 53, 173, 183, 194, 36, 200, 20, 93, 124, 103, 167, 1, 91, 98, 232, 148, 39, 83, 80, 144, 226, 155, 104, 142, 182, 237, 255, 109, 248, 81, 97, 152, 112, 119, 73, 249, 55, 96, 224, 84, 122, 191, 101, 37, 46, 13, 228, 253, 159, 3, 79, 75, 136, 180, 107, 193, 160, 153, 28, 9, 22, 66, 143, 21, 14, 33, 123, 195, 48, 245, 38, 2, 0, 176, 69, 168, 132, 52, 174, 113, 230, 146, 49, 209, 111, 8, 61, 139, 184, 58, 241, 88, 138, 205, 192, 17, 250, 102, 65, 27, 147, 24, 133, 178, 129, 199, 208, 149, 25, 156, 41, 10, 50, 163, 157, 188, 222, 169, 32, 190, 7, 100, 30, 45, 16, 214, 86, 204, 34, 5, 116, 197, 78, 154, 57, 130, 141, 213, 151, 72, 82, 175, 247, 54, 62, 244, 203, 105, 202, 158, 251, 6, 211, 177, 85, 4, 196, 117, 166, 70, 56, 135, 150, 18, 186, 95, 29, 125, 179, 221, 252, 64, 219, 189, 238, 235, 115, 162, 76, 60, 210, 77, 131, 99, 110, 212, 218, 181, 15, 63, 242, 118, 47, 19, 243, 74, 134, 198, 254, 170, 161, 206, 164, 227, 207, 68, 234, 240, 106, 187, 59, 140, 31, 239]

pbox = [48, 237, 137, 417, 220, 282, 121, 198, 425, 172, 365, 339, 366, 140, 291, 21, 60, 444, 389, 503, 480, 200, 322, 117, 112, 468, 190, 28, 161, 25, 360, 69, 278, 401, 93, 196, 127, 466, 49, 370, 438, 501, 498, 270, 420, 431, 91, 406, 295, 90, 11, 306, 445, 408, 182, 337, 175, 345, 173, 304, 109, 65, 19, 290, 319, 81, 120, 146, 83, 244, 442, 0, 147, 506, 119, 77, 271, 132, 325, 180, 260, 71, 185, 361, 391, 156, 63, 428, 342, 284, 274, 207, 231, 493, 310, 255, 276, 387, 357, 94, 246, 118, 472, 84, 124, 397, 145, 141, 68, 491, 61, 298, 205, 221, 96, 202, 378, 18, 133, 183, 12, 413, 344, 26, 163, 76, 471, 162, 206, 407, 481, 155, 343, 187, 130, 359, 67, 332, 497, 286, 106, 395, 373, 157, 171, 277, 433, 154, 505, 376, 31, 170, 467, 377, 131, 430, 423, 287, 460, 178, 167, 403, 252, 404, 367, 429, 390, 215, 226, 363, 473, 138, 58, 457, 225, 64, 262, 267, 307, 239, 320, 293, 57, 248, 150, 174, 32, 53, 166, 40, 5, 125, 405, 245, 149, 424, 219, 217, 294, 412, 289, 309, 263, 95, 315, 102, 272, 495, 228, 402, 73, 24, 269, 261, 364, 123, 10, 499, 100, 115, 470, 353, 201, 44, 197, 482, 210, 318, 382, 218, 416, 139, 494, 338, 456, 151, 181, 116, 475, 6, 164, 104, 177, 250, 105, 292, 450, 51, 101, 504, 232, 385, 216, 179, 478, 372, 299, 212, 331, 358, 323, 398, 439, 134, 223, 30, 265, 213, 463, 66, 80, 75, 37, 383, 16, 43, 461, 22, 113, 455, 312, 34, 421, 316, 356, 143, 62, 275, 488, 451, 41, 400, 437, 327, 415, 191, 189, 89, 394, 485, 160, 336, 280, 230, 203, 15, 99, 3, 427, 348, 492, 23, 351, 396, 39, 311, 507, 74, 422, 85, 259, 122, 283, 82, 302, 313, 227, 476, 452, 458, 477, 371, 486, 434, 462, 128, 334, 35, 386, 136, 436, 354, 29, 251, 86, 240, 409, 135, 78, 479, 169, 454, 510, 242, 238, 500, 326, 300, 204, 441, 257, 243, 308, 443, 193, 108, 432, 508, 9, 233, 349, 103, 279, 324, 474, 88, 256, 414, 448, 392, 159, 314, 234, 194, 328, 399, 273, 483, 165, 20, 393, 247, 388, 341, 490, 502, 375, 264, 17, 13, 352, 509, 301, 97, 79, 14, 496, 297, 56, 268, 110, 379, 7, 355, 446, 440, 469, 489, 33, 50, 153, 511, 129, 152, 45, 464, 258, 224, 487, 435, 98, 54, 346, 192, 158, 380, 329, 36, 222, 229, 465, 208, 42, 381, 418, 453, 484, 426, 368, 214, 235, 92, 253, 369, 126, 186, 249, 410, 72, 384, 4, 374, 87, 419, 168, 209, 281, 330, 362, 52, 27, 447, 55, 449, 46, 285, 305, 114, 188, 195, 176, 236, 70, 38, 184, 148, 288, 111, 266, 303, 107, 317, 350, 211, 296, 142, 321, 1, 411, 254, 2, 199, 335, 47, 241, 459, 333, 59, 8, 347, 144, 340]


BLOCK_SIZE = 64


def pad(data):
    return data + bytes([BLOCK_SIZE - len(data) % BLOCK_SIZE] * (BLOCK_SIZE - len(data) % BLOCK_SIZE))


def break_into_blocks(data):
    return [data[i:i + BLOCK_SIZE] for i in range(0, len(data), BLOCK_SIZE)]


def expand(key, length):
    key = list(key)
    while len(key) < length:
        key += [secrets.choice(key)]
    return key


def sub(data):
    return bytes([sbox[x] for x in data])


def perm(data):
    data = bin(int.from_bytes(data, 'big'))[2:].rjust(len(pbox), '0')
    data = ''.join(data[x] for x in pbox)
    return bytes([int(data[i:i + 8], 2) for i in range(0, len(data), 8)])


def xor(data, key):
    return bytes(map(key.__xor__, data))


def encrypt(data, key):
    count = Counter(data)
    data = pad(data)
    for i, j in sorted(count.items()):
        if j & 0xd == j:
            key = key[:j] + bytes([i]) + key[j:]
    key = expand(key, len(data) // BLOCK_SIZE)
    old_blocks = break_into_blocks(data)
    blocks = []

    for i, block in enumerate(old_blocks):
        for j in range(i):
            block = perm(block)
            block = sub(block)
        if i > 0:
            block = list(xor(block, key[i - 1]))
            for j in range(BLOCK_SIZE):
                block[j] ^= old_blocks[i-1][j]
            block = bytes(block)
        blocks.append(block)

    return b''.join(blocks)


with open('flag', 'rb') as f:
    key = f.read()

with open('data', 'rb') as f:
    data = f.read()

with open('encrypted', 'wb') as f:
    f.write(str(len(data)).encode() + b'\n')
    f.write(str(len(key)).encode() + b'\n')
    f.write(encrypt(data, key))
